// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApi.Data;

namespace MoviesAPI.Data.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20190323024721_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviesApi.Data.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<int>("RunningTime");

                    b.Property<string>("Title");

                    b.Property<int>("YearOfRelease");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7221cc40-a577-47c5-bee5-e5c39e068c54"),
                            Genre = 8194,
                            RunningTime = 200,
                            Title = "Titanic",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = new Guid("911b09fb-d9ab-49c3-802f-44daeade3a4a"),
                            Genre = 4,
                            RunningTime = 120,
                            Title = "Die Hard",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = new Guid("8fd45d63-9ab1-400d-b4de-a7e96dbebf4a"),
                            Genre = 32,
                            RunningTime = 631,
                            Title = "The Lord of the Rings",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = new Guid("1e8b0d25-c644-47fa-b2a5-24a95fb84138"),
                            Genre = 17,
                            RunningTime = 110,
                            Title = "Get Out",
                            YearOfRelease = 2018
                        },
                        new
                        {
                            Id = new Guid("98b9067a-caa1-46b1-b07e-850e60ea1df7"),
                            Genre = 129,
                            RunningTime = 98,
                            Title = "27 Dresses",
                            YearOfRelease = 2011
                        },
                        new
                        {
                            Id = new Guid("4a6bbe9e-5486-4c39-8cd8-582cfd89e1d1"),
                            Genre = 8192,
                            RunningTime = 127,
                            Title = "The Dutchess",
                            YearOfRelease = 2006
                        },
                        new
                        {
                            Id = new Guid("aeb5174c-e518-491d-8124-fe7e19375d20"),
                            Genre = 12,
                            RunningTime = 163,
                            Title = "Casino Royale",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = new Guid("98fd020f-7568-4102-8d77-445b749c9d9b"),
                            Genre = 1025,
                            RunningTime = 93,
                            Title = "The Simpsons Movie",
                            YearOfRelease = 2009
                        },
                        new
                        {
                            Id = new Guid("8e787d4f-a156-46b8-8545-01ea93dc866b"),
                            Genre = 5,
                            RunningTime = 118,
                            Title = "Iron Man",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = new Guid("2d8f2a2d-300d-41fb-a725-0a3f48c2591c"),
                            Genre = 5,
                            RunningTime = 145,
                            Title = "Iron Man 2",
                            YearOfRelease = 2010
                        },
                        new
                        {
                            Id = new Guid("bea6446a-390f-4f42-9486-30603aeb5c17"),
                            Genre = 5,
                            RunningTime = 123,
                            Title = "Iron Man 3",
                            YearOfRelease = 2013
                        },
                        new
                        {
                            Id = new Guid("9934399e-40f7-4a63-aa93-000555aa35d7"),
                            Genre = 6,
                            RunningTime = 120,
                            Title = "Batman",
                            YearOfRelease = 1989
                        },
                        new
                        {
                            Id = new Guid("4db8b514-a4c1-4f81-b89d-04f53f573586"),
                            Genre = 16,
                            RunningTime = 111,
                            Title = "Saw",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = new Guid("793f32ad-9166-4fac-8603-4da67800e5a1"),
                            Genre = 2048,
                            RunningTime = 87,
                            Title = "Man on Wire",
                            YearOfRelease = 2010
                        });
                });

            modelBuilder.Entity("MoviesApi.Data.Entities.RatingEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("DateSet");

                    b.Property<Guid>("MovieId");

                    b.Property<decimal>("Rating");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MoviesApi.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23a47e06-f104-4a03-96b3-731de11d24cb"),
                            DateOfBirth = new DateTimeOffset(new DateTime(2001, 3, 23, 2, 47, 20, 935, DateTimeKind.Unspecified).AddTicks(7620), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Tom",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("18607aca-a79d-4a00-a4ae-18041ec50b01"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1947, 3, 23, 2, 47, 20, 935, DateTimeKind.Unspecified).AddTicks(8495), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Jamal",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = new Guid("a458d790-5e57-45ee-a738-0ae6146d520f"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1991, 3, 23, 2, 47, 20, 935, DateTimeKind.Unspecified).AddTicks(8504), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "John",
                            LastName = "Robertson"
                        },
                        new
                        {
                            Id = new Guid("47aa2c04-7ccf-44e9-b528-bc88044171bf"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1973, 3, 23, 2, 47, 20, 935, DateTimeKind.Unspecified).AddTicks(8509), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Leon",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("26212ecc-c6f7-4ee6-9832-335e7619cd43"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1987, 3, 23, 2, 47, 20, 935, DateTimeKind.Unspecified).AddTicks(8509), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Katie",
                            LastName = "McDonald"
                        });
                });

            modelBuilder.Entity("MoviesApi.Data.Entities.RatingEntity", b =>
                {
                    b.HasOne("MoviesApi.Data.Entities.MovieEntity", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_Movies_Ratings")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApi.Data.Entities.UserEntity", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Ratings")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
